{"version":3,"sources":["Components/Buttons.js","Components/Display.js","Components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","props","onClick","clicked","value","Display","className","show","Calculator","useState","prevValue","setPrevValue","nextValue","setNextValue","op","setOp","calcOperations","firstValue","secondValue","reset","handleOperations","num","Number","isInteger","parseInt","String","final","parseFloat","performOp","test","calcButtons","forEach","item","push","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAUeA,G,KAPC,SAACC,GACb,OACI,4BAAQC,QAAS,kBAAMD,EAAME,QAAQF,EAAMG,SAASH,EAAMG,SCMnDC,G,MARC,SAACJ,GACb,OACI,yBAAKK,UAAU,WACVL,EAAMM,Q,MC2FJC,MAzFf,WAAsB,MAEgBC,mBAAS,MAFzB,mBAEXC,EAFW,KAEAC,EAFA,OAGgBF,mBAAS,KAHzB,mBAGXG,EAHW,KAGAC,EAHA,OAIEJ,mBAAS,MAJX,mBAIXK,EAJW,KAIPC,EAJO,KAOZC,EAAiB,CACnB,IAAK,SAACC,EAAYC,GAAb,OAA6BD,EAAaC,GAC/C,IAAK,SAACD,EAAYC,GAAb,OAA6BD,EAAaC,GAC/C,IAAK,SAACD,EAAYC,GAAb,OAA6BD,EAAaC,GAC/C,IAAK,SAACD,EAAYC,GAAb,OAA6BD,EAAaC,GAC/C,IAAK,SAACD,EAAYC,GAAb,OAA6BA,IAyBhCC,EAAQ,WACVN,EAAa,KACbF,EAAa,MACbI,EAAM,OAIJK,EAAmB,SAAChB,GA5BR,IAACiB,EA6BXC,OAAOC,UAAUnB,IA7BNiB,EA8BDG,SAASpB,EAAO,IA7B9BS,EAA2B,MAAdD,EAAoBa,OAAOJ,GAAOT,EAAYS,IA+BlDjB,KAASY,GACH,OAAPF,IACAC,EAAMX,GACNO,EAAaC,GACbC,EAAa,KAEbC,GACAC,EAAMX,GAEPM,GAAaI,GAAMF,GApCZ,WACd,IAAIc,EAAQV,EAAeF,GACvBa,WAAWjB,GACXiB,WAAWf,IAEfG,EAAM,MACNF,EAAaY,OAAOC,IACpBf,EAAa,MA8BLiB,IAGW,UAAVxB,EACLe,IAEe,MAAVf,IAhCJ,KAAKyB,KAAKjB,IACbC,EAAaD,EAAY,OAqCzBkB,EAAc,GAMpB,MALA,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,IAAI,KAAKC,SAAQ,SAAAC,GAClDF,EAAYG,KACR,kBAAC,EAAD,CAAS7B,MAAO4B,EAAME,IAAKF,EAAM7B,QAASiB,QAI9C,yBAAKd,UAAU,cACX,kBAAC,EAAD,CAASC,KAAMK,IACf,yBAAKN,UAAU,WACVwB,GAEL,6BACI,4BAAQxB,UAAU,YAAYJ,QAASiB,GAAvC,YC/EDgB,MARf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,QCKc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.89143507.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Styles/Buttons.css';\r\n\r\nconst Buttons = (props) => {\r\n    return (\r\n        <button onClick={() => props.clicked(props.value)}>{props.value}</button>\r\n    )\r\n\r\n}\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport '../Styles/Display.css';\r\n\r\nconst Display = (props) => {\r\n    return (\r\n        <div className='Display'>\r\n            {props.show}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Display;","import React, { useState } from 'react';\r\nimport Buttons from './Buttons';\r\nimport Display from './Display';\r\nimport '../Styles/Calculator.css';\r\nimport '../Styles/Buttons.css';\r\n\r\n\r\n\r\nfunction Calculator() {\r\n    // declare state values\r\n    const [prevValue, setPrevValue] = useState(null);\r\n    const [nextValue, setNextValue] = useState(\"0\");\r\n    const [op, setOp] = useState(null);\r\n    \r\n    // object with the operations\r\n    const calcOperations = {\r\n        \"/\": (firstValue, secondValue) => firstValue / secondValue,\r\n        \"*\": (firstValue, secondValue) => firstValue * secondValue,\r\n        \"+\": (firstValue, secondValue) => firstValue + secondValue,\r\n        \"-\": (firstValue, secondValue) => firstValue - secondValue,\r\n        \"=\": (firstValue, secondValue) => secondValue,\r\n    }\r\n\r\n    // build the number\r\n    const handleNum = (num) => {\r\n        setNextValue(nextValue === \"0\" ? String(num) : nextValue + num)\r\n    }\r\n\r\n    // preforms the basic operations\r\n    const performOp = () => {\r\n        let final = calcOperations[op](\r\n            parseFloat(prevValue),\r\n            parseFloat(nextValue)\r\n        );\r\n        setOp(null);\r\n        setNextValue(String(final));\r\n        setPrevValue(null);\r\n    }\r\n\r\n    const insertDecimal = () => {\r\n        if (!/\\./.test(nextValue)) {\r\n          setNextValue(nextValue + \".\");\r\n        }\r\n      };\r\n\r\n    const reset = () => {\r\n        setNextValue(\"0\");\r\n        setPrevValue(null);\r\n        setOp(null);\r\n    }\r\n    \r\n    // handle the operations\r\n    const handleOperations = (value) => {\r\n        if (Number.isInteger(value)) {\r\n            handleNum(parseInt(value, 10));\r\n        }\r\n        else if (value in calcOperations){\r\n            if (op === null){\r\n                setOp(value);\r\n                setPrevValue(nextValue);\r\n                setNextValue('');\r\n            }\r\n            if (op) {\r\n                setOp(value);\r\n            }\r\n            if(prevValue && op && nextValue){\r\n                performOp();\r\n            }\r\n        }\r\n        else if (value === \"reset\"){\r\n            reset();\r\n        }\r\n        else if (value === \".\") {\r\n            insertDecimal();\r\n        }\r\n    }\r\n\r\n    // create the buttons\r\n    const calcButtons = [];\r\n    [9,8,7,\"/\",6,5,4,\"*\",3,2,1,\"-\",0,\".\",\"=\",\"+\"].forEach(item => {\r\n        calcButtons.push(\r\n            <Buttons value={item} key={item} clicked={handleOperations}/>\r\n        )\r\n    })\r\n    return (\r\n        <div className='Calculator'>\r\n            <Display show={nextValue} />\r\n            <div className='Buttons'>\r\n                {calcButtons}\r\n            </div>\r\n            <div>\r\n                <button className='btn-clear' onClick={reset}>reset</button>\r\n            </div> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport Calculator from './Components/Calculator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}